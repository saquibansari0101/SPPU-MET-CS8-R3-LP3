#ML1-----------------------------------------------------------------

#importing packages
import matplotlib.pyplot as plt
import pandas as pd

#read dataset
data=pd.read_csv("hours.csv")
x=data.iloc[:,:-1].values
y=data.iloc[:,1].values

#import linearregression and create object of it
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(x,y)

Accuracy=regressor.score(x,y)*100
Accuracy

#predict value using regressor object
y_pred=regressor.predict([[10]])
y_pred

#take user input
hours=int(input('enter the no of hours'))

#calculate value of y
eq=regressor.coef_*hours+regressor.intercept_
eq

print('y=%f*%f+%f ' % (regressor.coef_,hours,regressor.intercept_))

print("Risk Score",eq[0])

plt.plot(x,y,'o')
plt.plot(x,regressor.predict(x))
plt.show()


#1 #DATASET  @hours_spent(num)	@risk_score(num)




ML2-----------------------------------------------------------------



#import packages
import pandas as pd
import numpy as np

dataset=pd.read_csv("tree.csv")

x=dataset.iloc[:,:-1]
y=dataset.iloc[:,5]

#Label encoder
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
x=x.apply(le.fit_transform)
print(x)


from sklearn.tree import DecisionTreeClassifier
regressor=DecisionTreeClassifier()
regressor.fit(x.iloc[:,1:5],y)

x_in=np.array([1,1,0,0])
y_pred=regressor.predict([x_in])


import six
import sys
sys.modules['sklearn.externals.six'] = six
from sklearn.externals.six import StringIO
from IPython.display import Image
from sklearn.tree import export_graphviz
import pydotplus


dot_data=StringIO()
export_graphviz(regressor,out_file=dot_data,filled=True,rounded=True,special_characters=True)

graph=pydotplus.graph_from_dot_data(dot_data.getvalue())
graph.write_png("tree.png")
Image(graph.create_png())




#2 #DATASET @id(num)	@age(0/1/2)	@income(0/1/2)	@marital_status(0/1)




ML3-----------------------------------------------------------------

# K-Nearest Neighbors (K-NN)
#import packages
import numpy as np
import pandas as pd

# Read dataset
dataset = pd.read_csv("kdata.csv")
dataset

X = dataset.iloc[:,:-1].values
X

y = dataset.iloc[:,2].values
y

#import KNeighborsClassifier and create object of it
from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors = 3)
classifier.fit(X,y)

#predictclass for the points(6,6)
X_test = np.array([6,2])
y_pred = classifier.predict([X_test])
print("General KNN:",y_pred)

classifier = KNeighborsClassifier(n_neighbors = 3, weights = 'distance')
classifier.fit(X,y)

#predict class for the points(6,6)
X_test = np.array([6,2])
y_pred = classifier.predict([X_test])
print("Distance Weighted KNN:",y_pred)

#3 #DATASET @X(num)	@y(num)	@class(positive/negative)


ML4-----------------------------------------------------------------
#import packages
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

#Create dataset
X = [[0.1,0.6],[0.15,0.71],[0.08,0.9],[0.16,0.85],[0.2,0.3],[0.25,0.5],[0.24,0.1],[0.3,0.2]]
X

#Initial centroid points
centers = np.array([[0.1,0.6],[0.3,0.2]])
print("Initial Centroids:\n",centers)


#import KMeans class
from sklearn.cluster import KMeans
model =  KMeans(n_clusters = 2, init = centers, n_init = 1)
model.fit(X)
print("Labels:", model.labels_)
print("P6 belongs to clusteer", model.labels_[5])
print("Number of population around cluster 2:", np.count_nonzero(model.labels_ == 1))
print("New Centroids:\n", model.cluster_centers_)




#ICS1-----------------------------------------------------------------

#initialization

IP = [2, 6, 3, 1, 4, 8, 5, 7]
IPi = [4, 1, 3, 5, 7, 2, 8, 6]
E = [4, 1, 2, 3, 2, 3, 4, 1]
S0 = [
        [1, 0, 3, 2],
        [3, 2, 1, 0],
        [0, 2, 1, 3],
        [3, 1, 3, 2]
     ]
S1 = [
        [0, 1, 2, 3],
        [2, 0, 1, 3],
        [3, 0, 1, 0],
        [2, 1, 0, 3]
     ]
P4 = [2, 4, 3, 1]
P10 = [3, 5, 2, 7, 4, 10, 1, 9, 8, 6]
P8 = [6, 3, 7, 4, 8, 5, 10, 9]

#Function Definitions

def permutation(pattern, key):
    permuted = ""
    for i in pattern:
        permuted += key[i-1] 
    return permuted

def generate_first(left, right):
    left = left[1:] + left[:1]
    right = right[1:] + right[:1]
    key = left + right
    return permutation(P8, key)

def generate_second(left, right):
    left = left[3:] + left[:3]
    right = right[3:] + right[:3]
    key = left + right
    return permutation(P8, key)

def transform(right, key):
    extended = permutation(E, right)
    print("Extended Permutation: ", extended)
    xor_cipher = bin(int(extended, 2) ^ int(key, 2))[2:].zfill(8)
    print("After applying xor with round key ", xor_cipher)
    xor_left = xor_cipher[:4]
    xor_right = xor_cipher[4:]
    new_left = Sbox(xor_left, S0)
    new_right = Sbox(xor_right, S1)
    print("After applying S-box ")
    print("Left: S0= ", new_left)
    print("Right: S1= ", new_right)
    p4permute = permutation(P4, new_left + new_right)
    print("After applying P4 permutation ", p4permute)
    return p4permute 

def Sbox(data, box):
    row = int(data[0] + data[3], 2)
    column = int(data[1] + data[2], 2)
    return bin(box[row][column])[2:].zfill(2)   

def encrypt(left, right, key):
    cipher = int(left, 2) ^ int(transform(right, key), 2)
    print("After applying final xor= ", bin(cipher)[2:].zfill(4))
    return right, bin(cipher)[2:].zfill(4)

def decrypt(left, right, key):
    plain = int(left, 2) ^ int(transform(right, key), 2)
    print("After applying final xor= ", bin(plain)[2:].zfill(4))
    return right, bin(plain)[2:].zfill(4)


#User Input

key = "1010000010"
plaintext = "01110010"


userInput = False


if userInput == True:
    print("Start the S-DES algorithim.")
    key = input("Enter a 10-bit key: ")
    if len(key) != 10:
        raise Exception("Check the input")


    plaintext = input("Enter 8-bit plaintext: ")
    if len(plaintext) != 8:
        raise Exception("Check the input")


#Encryption Block

print("Input KEY: ", key)
print("Input PLAINTEXT: ", plaintext)

p10key = permutation(P10, key)
print("\nAfter applying permutation P10 on KEY: ",p10key)


print("\nAfter split")
left_key = p10key[:len(p10key)//2]
right_key = p10key[len(p10key)//2:]
print("Left key =: ",left_key,"   Right key =: ",right_key)



first_key = generate_first(left_key, right_key)
second_key = generate_second(left_key, right_key)
print("\nFirst key K1 =: ",first_key)
print("Second key K2=: ",second_key)


print("Encrypt the message")
initial_permutation = permutation(IP, plaintext)
print("Initial Permutation =: ",initial_permutation)

print("\nEncryption Function 1 ")
print("IP Split ")

left_data = initial_permutation[:len(initial_permutation)//2]
right_data = initial_permutation[len(initial_permutation)//2:]
print("Left data =: ",left_data)
print("Right data =: ",right_data)

left, right = encrypt(left_data, right_data, first_key)
print("\nEncrypted data =: ",left+right)


print("\nEncryption Function 2 ")
right, left  = encrypt(left, right, second_key)
print("Encrypted data =: ",left+right)

cipheredText= permutation(IPi, left + right)
print("\nCiphertext =: ",  cipheredText )


#Decryption Block

print("Input KEY: ", key)
print("Above CipherText: ", cipheredText)

p10key = permutation(P10, key)
print("\nAfter applying permutation P10 on KEY: ",p10key)


print("\nAfter split")
left_key = p10key[:len(p10key)//2]
right_key = p10key[len(p10key)//2:]
print("Left key =: ",left_key,"   Right key =: ",right_key)



first_key = generate_first(left_key, right_key)
second_key = generate_second(left_key, right_key)
print("\nFirst key K1 =: ",first_key)
print("Second key K2=: ",second_key)


print("\nDecrypt the message")
initial_permutation = permutation(IP, cipheredText)
print("Initial Permutation =: ",initial_permutation)

print("\nDecryption Function 1 ")
print("IP Split ")
left_data = initial_permutation[:len(initial_permutation)//2]
right_data = initial_permutation[len(initial_permutation)//2:]
print("Left data =: ",left_data)
print("Right data =: ",right_data)

left, right = decrypt(left_data, right_data, second_key)
print("Decrypted data =: ",left+right)

print("\nDecryption Function 2 ")
right,left,    = decrypt(left, right, first_key)
print("Decrypted data =: ",left+right)

print("\nPlain text =: ", permutation(IPi, left + right))




#ICS2-----------------------------------------------------------------

import sys
 
# S-Box
sBox  = [0x9, 0x4, 0xa, 0xb, 0xd, 0x1, 0x8, 0x5,
         0x6, 0x2, 0x0, 0x3, 0xc, 0xe, 0xf, 0x7]
 
# Inverse S-Box
sBoxI = [0xa, 0x5, 0x9, 0xb, 0x1, 0x7, 0x8, 0xf,
         0x6, 0x0, 0x2, 0x3, 0xc, 0x4, 0xd, 0xe]
 
# Round keys: K0 = w0 + w1; K1 = w2 + w3; K2 = w4 + w5
w = [None] * 6
 
def mult(p1, p2):
    """Multiply two polynomials in GF(2^4)/x^4 + x + 1"""
    p = 0
    while p2:
        if p2 & 0b1:
            p ^= p1
        p1 <<= 1
        if p1 & 0b10000:
            p1 ^= 0b11
        p2 >>= 1
    return p & 0b1111
 
def intToVec(n):
    """Convert a 2-byte integer into a 4-element vector"""
    return [n >> 12, (n >> 4) & 0xf, (n >> 8) & 0xf,  n & 0xf]            
 
def vecToInt(m):
    """Convert a 4-element vector into 2-byte integer"""
    return (m[0] << 12) + (m[2] << 8) + (m[1] << 4) + m[3]
 
def addKey(s1, s2):
    """Add two keys in GF(2^4)"""  
    return [i ^ j for i, j in zip(s1, s2)]
     
def sub4NibList(sbox, s):
    """Nibble substitution function"""
    return [sbox[e] for e in s]
     
def shiftRow(s):
    """ShiftRow function"""
    return [s[0], s[1], s[3], s[2]]
 
def keyExp(key):
    """Generate the three round keys"""
    def sub2Nib(b):
        """Swap each nibble and substitute it using sBox"""
        return sBox[b >> 4] + (sBox[b & 0x0f] << 4)
 
    Rcon1, Rcon2 = 0b10000000, 0b00110000
    w[0] = (key & 0xff00) >> 8
    w[1] = key & 0x00ff
    w[2] = w[0] ^ Rcon1 ^ sub2Nib(w[1])
    w[3] = w[2] ^ w[1]
    w[4] = w[2] ^ Rcon2 ^ sub2Nib(w[3])
    w[5] = w[4] ^ w[3]
 
def encrypt(ptext):
    """Encrypt plaintext block"""
    def mixCol(s):
        return [s[0] ^ mult(4, s[2]), s[1] ^ mult(4, s[3]),
                s[2] ^ mult(4, s[0]), s[3] ^ mult(4, s[1])]    
     
    state = intToVec(((w[0] << 8) + w[1]) ^ ptext)
    state = mixCol(shiftRow(sub4NibList(sBox, state)))
    state = addKey(intToVec((w[2] << 8) + w[3]), state)
    state = shiftRow(sub4NibList(sBox, state))
    return vecToInt(addKey(intToVec((w[4] << 8) + w[5]), state))
     
def decrypt(ctext):
    """Decrypt ciphertext block"""
    def iMixCol(s):
        return [mult(9, s[0]) ^ mult(2, s[2]), mult(9, s[1]) ^ mult(2, s[3]),
                mult(9, s[2]) ^ mult(2, s[0]), mult(9, s[3]) ^ mult(2, s[1])]
     
    state = intToVec(((w[4] << 8) + w[5]) ^ ctext)
    state = sub4NibList(sBoxI, shiftRow(state))
    state = iMixCol(addKey(intToVec((w[2] << 8) + w[3]), state))
    state = sub4NibList(sBoxI, shiftRow(state))
    return vecToInt(addKey(intToVec((w[0] << 8) + w[1]), state))
 
if __name__ == '__main__':
    # Test vectors from "Simplified AES" (Steven Gordon)
    # (http://hw.siit.net/files/001283.pdf)
     
    plaintext = 0b1101011100101000
    key = 0b0100101011110101
    ciphertext = 0b0010010011101100
    keyExp(key)
    try:
        assert encrypt(plaintext) == ciphertext
    except AssertionError:
        print("Encryption error")
        print(encrypt(plaintext), ciphertext)
        sys.exit(1)
    try:
        assert decrypt(ciphertext) == plaintext
    except AssertionError:
        print("Decryption error")
        print(decrypt(ciphertext), plaintext)
        sys.exit(1)
    print("Test ok!")
    sys.exit()



#ICS3-----------------------------------------------------------------

from random import randint

P = 23
	
G = 9
		
print('The Value of P is :%d'%(P))
print('The Value of G is :%d'%(G))
	
a = 4
print('The Private Key a for Alice is :%d'%(a))
	
x = int(pow(G,a,P))
	
b = 3
print('The Private Key b for Bob is :%d'%(b))
	
y = int(pow(G,b,P))
	
ka = int(pow(y,a,P))
	
kb = int(pow(x,b,P))
	
print('Secret key for the Alice is : %d'%(ka))
print('Secret Key for the Bob is : %d'%(kb))
	


#ICS4-----------------------------------------------------------------


import random


'''
Euclid's algorithm for determining the greatest common divisor
Use iteration to make it faster for larger integers
'''


def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a


'''
Euclid's extended algorithm for finding the multiplicative inverse of two numbers
'''


def multiplicative_inverse(e, phi):
    d = 0
    x1 = 0
    x2 = 1
    y1 = 1
    temp_phi = phi

    while e > 0:
        temp1 = temp_phi//e
        temp2 = temp_phi - temp1 * e
        temp_phi = e
        e = temp2

        x = x2 - temp1 * x1
        y = d - temp1 * y1

        x2 = x1
        x1 = x
        d = y1
        y1 = y

    if temp_phi == 1:
        return d + phi


'''
Tests to see if a number is prime.
'''


def is_prime(num):
    if num == 2:
        return True
    if num < 2 or num % 2 == 0:
        return False
    for n in range(3, int(num**0.5)+2, 2):
        if num % n == 0:
            return False
    return True


def generate_key_pair(p, q):
    if not (is_prime(p) and is_prime(q)):
        raise ValueError('Both numbers must be prime.')
    elif p == q:
        raise ValueError('p and q cannot be equal')
    # n = pq
    n = p * q

    # Phi is the totient of n
    phi = (p-1) * (q-1)

    # Choose an integer e such that e and phi(n) are coprime
    e = random.randrange(1, phi)

    # Use Euclid's Algorithm to verify that e and phi(n) are coprime
    g = gcd(e, phi)
    while g != 1:
        e = random.randrange(1, phi)
        g = gcd(e, phi)

    # Use Extended Euclid's Algorithm to generate the private key
    d = multiplicative_inverse(e, phi)

    # Return public and private key_pair
    # Public key is (e, n) and private key is (d, n)
    return ((e, n), (d, n))


def encrypt(pk, plaintext):
    # Unpack the key into it's components
    key, n = pk
    # Convert each letter in the plaintext to numbers based on the character using a^b mod m
    cipher = [pow(ord(char), key, n) for char in plaintext]
    # Return the array of bytes
    return cipher


def decrypt(pk, ciphertext):
    # Unpack the key into its components
    key, n = pk
    # Generate the plaintext based on the ciphertext and key using a^b mod m
    aux = [str(pow(char, key, n)) for char in ciphertext]
    # Return the array of bytes as a string
    plain = [chr(int(char2)) for char2 in aux]
    return ''.join(plain)


if __name__ == '__main__':
    '''
    Detect if the script is being run directly by the user
    '''
    print("===========================================================================================================")
    print("================================== RSA Encryptor / Decrypter ==============================================")
    print(" ")

    p = int(input(" - Enter a prime number (17, 19, 23, etc): "))
    q = int(input(" - Enter another prime number (Not one you entered above): "))

    print(" - Generating your public / private key-pairs now . . .")

    public, private = generate_key_pair(p, q)

    print(" - Your public key is ", public, " and your private key is ", private)

    message = input(" - Enter a message to encrypt with your public key: ")
    encrypted_msg = encrypt(public, message)

    print(" - Your encrypted message is: ", ''.join(map(lambda x: str(x), encrypted_msg)))
    print(" - Decrypting message with private key ", private, " . . .")
    print(" - Your message is: ", decrypt(private, encrypted_msg))
